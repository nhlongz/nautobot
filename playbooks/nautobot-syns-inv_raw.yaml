---
- name: Playbook to Bootstrap Nautobot Inventory
  hosts: all
  gather_facts: True
  vars:
    url: "{{ url_nautobot }}"
    token: "{{ token_nautobot }}"
    platform: "{{ ansible_network_os }}"
    site: "{{ site_name }}"
    device_role: "{{ role_group }}"
    position_default: 38
    Name_device: ""
    Conected_device: ""
    temp: ""
  tasks:
#------- ansible colected infomation hosts. ------#
  - name: "Check if net_version exists"
    ### If ansible_facts does not provide net_version we manually fill it in as unknown
    set_fact:
      net_version: "unknown"
      cacheable: yes
    when: ansible_facts['net_version'] is undefined

  - name: "Check if net_model exists"
    ### If ansible_facts does not provide net_model we manually fill it in as unknown
    ansible.builtin.set_fact:
      net_model: "{{ ansible_facts['net_version'] }}"
      cacheable: yes
    when: ansible_facts['net_model'] is undefined
    
  - name: "Assign net version"
    set_fact:
      net_version: "{{ ansible_facts['net_version'] }}"
    when: ansible_facts['net_version'] is defined

  ### Optional
  - name: "Resolve FQDN Hostname - perform DIG"
    ### Perform linux DIG command to get the reverse DNS record for the IP. THis will be our new hostname for netbox
    raw: "dig -x {{ ansible_host }} +short | sed -e 's/.$//'"
    register: dig_result
    delegate_to: localhost

  ### Optional
  - name: "TASK 11: Assign dig result to fqdn var"
    ### If Reverse DNS exists, trim whhite spaces and assing to var
    set_fact:
      fqdn: "{{ dig_result.stdout_lines[0] | trim}}"
    when: dig_result.stdout_lines[0] is defined

  ### Optional
  - name: "TASK 12: If no dig result, assign placeholder fqdn value"
    ### If no reverse DNS, then set a inventory hostname and IP as the hostname
    set_fact:
      fqdn: "{{ inventory_hostname }}-no-dns-{{ ansible_host }}"
    when: dig_result.stdout_lines[0] is undefined

#-------- ansible create and update infomation from ansible_colected to nautobot------#
# create manufacturer, device_type, site, device_role, platporm, region,rack.
  - name: Create manufacturer within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.manufacturer:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ manu }}"
      state: present
    delegate_to: localhost
  - name: Create device_type within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.device_type:
      url: "{{ url }}"
      token: "{{ token }}"
      slug: "{{ ansible_facts['net_model'] }}"
      model: "{{ ansible_facts['net_model'] }}"
      manufacturer: "{{ manu }}"
      state: present
    delegate_to: localhost
  - name: Create parent_region within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.region:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ parent_region }}"
      state: present
    delegate_to: localhost
  - name: Create region within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.region:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ site_Region }}"
      parent_region: "{{ parent_region }}"
      state: present
    delegate_to: localhost
  - name: Create site within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.site:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ site }}"
      region: "{{ site_Region }}"
      physical_address: "{{ site_Address }}"
      time_zone: "{{ time_zone }}"
      contact_name: "{{ contact_name }}"
      contact_phone: "{{ contact_phone }}"
      status: active
      state: present
    delegate_to: localhost
  - name: Create device role within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.device_role:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ device_role }}"
      color: "{{ role_color }}"
      state: present
    delegate_to: localhost
  - name: Create platform within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.platform:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ platform }}"
      state: present
    delegate_to: localhost
  - name: Create rack group within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.rack_group:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "rack_group_{{ site }}"
      site: "{{ site }}"
      state: present
    delegate_to: localhost
  - name: Create rack within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.rack:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "Rack_{{ site }}"
      site: "{{ site }}"
      rack_group: "rack_group_{{ site }}"
      status: active
      state: present
    delegate_to: localhost

  - set_fact:
      Name_device: "{{ inventory_hostname }}.{{ site_name }}.vn" 

#####---- create devices ------######
  - name: Create device within Nautobot with only required information
    networktocode.nautobot.device:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ Name_device }}"
      asset_tag: "{{ fqdn }}"
      platform: "{{ platform }}"
      device_type: "{{ ansible_facts['net_model'] }}"
      device_role: "{{ device_role }}"
      site: "{{ site }}"
      serial: "{{ ansible_facts['net_serialnum'] }}"
      custom_fields:
        firmware_version: "{{ net_version }}"
      status: active
      state: present
    delegate_to: localhost

    ### this interface will be used as the primary IP and interface for the device
  - name: Create interface within Nautobot with only required information
    networktocode.nautobot.device_interface:
      url: "{{ url }}"
      token: "{{ token }}"
      device: "{{ Name_device }}"
      name: "{{ item.key }}" 
      mac_address: "{{ item.value.macaddress }}"
      mtu: "{{ item.value.mtu }}"
      type: "100BASE-TX (10/100ME)" 
      state: present
      validate_certs: no
    with_dict:   "{{ ansible_facts.net_interfaces }}"
    delegate_to: localhost
  - name: fix type interface vlan
    networktocode.nautobot.device_interface:
      url: "{{ url }}"
      token: "{{ token }}"
      device: "{{ Name_device }}"
      name: "{{ item.key }}" 
      mac_address: "{{ item.value.macaddress }}"
      mtu: "{{ item.value.mtu }}"
      type: "Virtual" 
      state: present
      validate_certs: no
    when: "{{item.key}} == Vlan1"
    with_dict:   "{{ ansible_facts.net_interfaces }}"
    delegate_to: localhost
  - name: "Add IP address of ansible host to IPAM"
#networktocode.nautobot.ip_address:
    networktocode.nautobot.ip_address:
      url: "{{ url }}"
      token: "{{ token }}"
      address: "{{ ansible_host }}"
      status: active
      assigned_object:
        name: "{{ item.key }}" 
        device: "{{ Name_device }}"
      state: present
      validate_certs: no
    when: item.value.ipv4.0.address is defined and item.value.ipv4.0.address == ansible_host
    with_dict:   "{{ ansible_facts.net_interfaces }}"
    delegate_to: localhost

# set primary ip.
  - name: "Assign ansible_host IP as the primary interface for the device"
    networktocode.nautobot.device:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ Name_device }}"
      platform: "{{ platform }}"
      device_type: "{{ ansible_facts['net_model'] }}"
      device_role: "{{ device_role }}"
      site: "{{ site }}"
      serial: "{{ ansible_facts['net_serialnum'] }}"
      primary_ip4: "{{ ansible_host }}/32"
      custom_fields:
        firmware_version: "{{ net_version }}"
      status: active
      state: present
    delegate_to: localhost

# add devices to the rack. 

  - name: "Update the rack and position of an existing device" 
    ignore_errors: true
    networktocode.nautobot.device:
      url: "{{ url }}"
      token: "{{ token }}"
      name: "{{ Name_device }}"
      rack: "Rack_{{ site }}"
      position: "{{ position_default|int - (position_rack|int)*2  }}"
      face: Front
      status: active
      state: present
    delegate_to: localhost
#    until: put_status.rc | default('') == 0 

#  - block:
#    - set_fact:
#        temp: "{{ item.value.0.host|map(split,'.') }}"
#        Conected_device: "{{ temp[0] }}-{{ site_name }}"
  - name: Create cable within Nautobot with only required information
    ignore_errors: true
    networktocode.nautobot.cable:
      url: "{{ url }}"
      token: "{{ token }}"
      termination_a_type: "dcim.interface"
      termination_a:
        device: "{{ Name_device }}"
        name: "{{ item.key }}"
      termination_b_type: "dcim.interface"
      termination_b:
        device: "{{ item.value.0.host}}"  #{{ 'sarav@gritfy.com'|split('@')}}
        name: "{{ item.value.0.port }}"
      status: connected
      state: present
    with_dict:   "{{ ansible_facts.net_neighbors }}"
    delegate_to: localhost
  - name: Delete cable within nautobot
    ignore_errors: true
    networktocode.nautobot.cable:
      url: "{{ url }}"
      token: "{{ token }}"
      termination_a_type: dcim.interface
      termination_a:
        device: site02-router.site02.vn
        name: FastEthernet0/0
      termination_b_type: dcim.interface
      termination_b:
        device: site03-router.site03.vn
        name: FastEthernet0/0
      state: absent
    run_once: true
    delegate_to: localhost
  - name: Delete cable within nautobot
    ignore_errors: true
    networktocode.nautobot.cable:
      url: "{{ url }}"
      token: "{{ token }}"
      termination_a_type: dcim.interface
      termination_a:
        device: site03-router.site03.vn
        name: FastEthernet0/0
      termination_b_type: dcim.interface
      termination_b:
        device: site02-router.site02.vn
        name: FastEthernet0/0
      state: absent
    run_once: true
    delegate_to: localhost
#    when: item.value.ipv4.0.address is defined and item.value.ipv4.0.address == ansible_host
#item.value.0.host | split('.') |list |first
#     with_dict:   "{{ ansible_facts.net_neighbors }}"
# "{{ ansible_facts.net_neighbors|dict2items }}"      
# {{ item.value.0.host | map(split,'.') | first }}